<template>
  <div class="index-page">
    <input type="button" class="start_btn" value="Start" @click="Start()" show="{{showstart}}"></input>
    <text class="statshow" show="{{showstat}}">{{stattext}}</text>
    <text class="retshow" show="{{showret}}">{{rettext}}</text>
  </div>
</template>

<script>
import router from '@system.router'
import fetch from '@system.fetch'
import brightness from '@system.brightness'

export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  private: {
    stattext: "",
    rettext: "Waiting...",
    showstart: true,
    showstat: false,
    showret: false,
    http_num: 0,
    http_interval: null,
    down_num: 0,
    down_interval: null,
    can_next: true,
    download_speeds: [],
    pings: []
  },
  async TestDownSpeed(size){
    this.stattext = size + "M 文件下载测试"
    this.rettext = "等待下载完成..."
    var start_time = new Date().getTime()
    console.log("begin fetch")
    var ret = await fetch.fetch({
      url: "http://test.ustc.edu.cn/backend/garbage.php?ckSize=" + size,
      header: {
        "Accept": "*/*",
        "Accept-Language": "zh-CN;zh;q=1.0",
        "Connection": "keep-alive",
        "Cookie": "ustc=1",
        "Host": "test.ustc.edu.cn",
        "Referer": "http://test.ustc.edu.cn/speedtest_worker.js",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0"
      }
    })
    var end_time = new Date().getTime()
    var time_s = (end_time - start_time) / 1000
    console.log("用时：" + time_s)
    var speed = (size / time_s).toFixed(3)
    this.download_speeds.push(Number(speed))
    this.rettext = speed.toString() + " MB/s"
    console.log(ret)
  },
  async TestPing(){
    this.showstart = false
    this.showstat = true
    this.showret = true
    this.stattext = "HTTP延迟"
    console.log("start test http")
    this.http_interval = setInterval(async() => {
      if(this.can_next){
        this.can_next = false
        var start_time = new Date().getTime()
        console.log("in async")
        var ret = await fetch.fetch({
          url: "http://www.baidu.com/sugrec",
          fail: (p1, p2) => {
            console.log("测速异常：" + p1 + " " + p2)
          }
        })
        console.log(ret)
        var end_time = new Date().getTime()
        if(ret.data.data != undefined){
          var time = (end_time - start_time)
          this.rettext = time.toString() + " ms"
          this.pings.push(Number(time))
        }
        this.can_next = true
        this.http_num ++
        if(this.http_num > 10){
          clearInterval(this.http_interval)
          await this.TestDownSpeed(1)
          setTimeout(async() => {
            await this.TestDownSpeed(1)
            setTimeout(async() => {
              await this.TestDownSpeed(1)
              setTimeout(() => {
                router.push({
                  uri: "pages/detail",
                  params: {
                    downs: this.download_speeds,
                    pings: this.pings
                  }
                })
              },1000)
            },1000)
          },1000)
        }
      }
    },500)
  },
  async Start(){
    await this.TestPing()
  },
  onInit(){
    brightness.setKeepScreenOn({
      keepScreenOn: true
    })
  }
}
</script>

<style>
.index-page {
  justify-content: center;
}
.start_btn{
  margin-top: 200px;
}
.statshow{
  position: absolute;
  margin-top: 160px;
  color: white
}
.retshow{
  position: absolute;
  margin-top: 240px;
  color: white
}
</style>
